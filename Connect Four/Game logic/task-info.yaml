type: edu
files:
- name: src/connectfour/Main.kt
  visible: true
  text: |-
    package connectfour

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/ConnectFourTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class ConnectFourTest : StageTest<Any>() {

        @DynamicTest
        fun cf2Test(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")

            var inputDimensions = mutableListOf<String>("4x5", "4X5", "10x6", "12x6")
            for (input in inputDimensions) {
                outputString = main.execute(input).trim()
                position = checkOutput(outputString.lowercase(), 0,
                    "board rows should be from 5 to 9",
                    "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                if (position == -1) return CheckResult(false,
                    "Wrong error message for out of range row size.")
            }

            inputDimensions = mutableListOf<String>("6x1", "7X4", "8x10", "9x30")
            for (input in inputDimensions) {
                outputString = main.execute(input).trim()
                position = checkOutput(outputString.lowercase(), 0,
                    "board columns should be from 5 to 9",
                    "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                if (position == -1) return CheckResult(false, "Wrong error message for out of range column size.")
            }

            outputString = main.execute("9X5").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "9 x 5 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")

            main.stop()
            return CheckResult.correct()
        }

        @DynamicTest
        fun cf3Test(): CheckResult {
            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if ( position  == -1 ) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if ( position  == -1 ) return CheckResult(false, "Wrong prompt for board dimensions.")

            val inputDimensions = mutableListOf<String>("6x", "X5", "10k6", "12Z6", "a  7x9", "5x8  t")
            for (input in inputDimensions) {
                outputString = main.execute(input).trim()
                position = checkOutput(outputString.lowercase(), 0,
                    "invalid input", "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                if (position == -1) return CheckResult(false,
                    "Wrong error message for out of range row size.")
            }

            outputString = main.execute("9X5").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "9 x 5 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")

            main.stop()
            return CheckResult.correct()
        }

        @DynamicTest
        fun cf4Test(): CheckResult {
            val whiteDiscs = mutableListOf<Pair<Int, Int>>()
            val blackDiscs = mutableListOf<Pair<Int, Int>>()
            val inputDimensions = listOf<String>("5x5", "9X9", "9X5", "", "   7   x   9   ", "  8  X   6   ", "\t  9 \tX \t5  \t ")

            for (input in inputDimensions) {
                val main = TestedProgram()
                var outputString = main.start().trim()

                var position = checkOutput(outputString.lowercase(), 0, "connect four")
                if (position == -1) return CheckResult(false, "Wrong program title.")
                position = checkOutput(outputString.lowercase(), position, "first player's name:")
                if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")

                outputString = main.execute("Anna").trim()
                position = checkOutput(outputString.lowercase(), 0, "second player's name:")
                if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")

                outputString = main.execute("Joan").trim()
                position = checkOutput(outputString.lowercase(), 0,
                    "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
                if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")

                outputString = main.execute(input).trim()
                val (r, c) = if (input == "") listOf("6", "7") else input.lowercase().split("x").map{ it -> it.trim() }

                position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "$r x $c board")
                if (position == -1) return CheckResult(false, "Wrong game information output.")
                position = checkOutput(outputString.lowercase(), position,
                    * getBoard(r.toInt(), c.toInt() ,whiteDiscs, blackDiscs))
                if (position == -1) return CheckResult(false, "Wrong board output.")
                main.stop()
            }

            return CheckResult.correct()
        }

        @DynamicTest
        fun cf5Test(): CheckResult {
            val whiteDiscs = mutableListOf<Pair<Int, Int>>()
            val blackDiscs = mutableListOf<Pair<Int, Int>>()

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if (position == -1) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")

            outputString = main.execute("5X6").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "5 x 6 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")
            position = checkOutput(outputString.lowercase(), position,
                * getBoard(5, 6 ,whiteDiscs, blackDiscs))
            if (position == -1) return CheckResult(false, "Wrong board output.")
            position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
            if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")

            for (row in 1..5) {
                for (col in 1..6) {
                    outputString = main.execute(col.toString()).trim()
                    if ( col % 2 == 1 ) whiteDiscs.add(Pair(row, col)) else blackDiscs.add(Pair(row, col))
                    position = checkOutput(outputString.lowercase(), 0,
                        * getBoard(5, 6 ,whiteDiscs, blackDiscs))
                    if (position == -1) return CheckResult(false, "Wrong board output.")
                    val checkOutStr = if ( col % 2 == 0 ) "anna\'s turn" else "joan\'s turn"
                    position = checkOutput(outputString.lowercase(), position, checkOutStr)
                    if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
                }
            }

            outputString = main.execute("end").trim()
            position = checkOutput(outputString.lowercase(), 0, "game over!")
            if (position == -1) return CheckResult(false, "Wrong game over message.")

            main.stop()
            return CheckResult.correct()
        }

        @DynamicTest
        fun cf6Test(): CheckResult {
            val whiteDiscs = mutableListOf<Pair<Int, Int>>()
            val blackDiscs = mutableListOf<Pair<Int, Int>>()

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if (position == -1) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")

            outputString = main.execute("7X7").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "7 x 7 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")
            position = checkOutput(outputString.lowercase(), position,
                * getBoard(7, 7 ,whiteDiscs, blackDiscs))
            if (position == -1) return CheckResult(false, "Wrong board output.")
            position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
            if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")

            for (row in 1..7) {
                for (col in 1..7) {
                    outputString = main.execute(col.toString()).trim()
                    if ( (row * 7 + col) % 2 == 0 ) whiteDiscs.add(Pair(row, col)) else blackDiscs.add(Pair(row, col))
                    position = checkOutput(outputString.lowercase(), 0,
                        * getBoard(7, 7 ,whiteDiscs, blackDiscs))
                    if (position == -1) return CheckResult(false, "Wrong board output.")
                    val checkOutStr = if ( (row * 7 + col) % 2 == 1 ) "anna\'s turn" else "joan\'s turn"
                    position = checkOutput(outputString.lowercase(), position, checkOutStr)
                    if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
                }
            }

            outputString = main.execute("end").trim()
            position = checkOutput(outputString.lowercase(), 0, "game over!")
            if (position == -1) return CheckResult(false, "Wrong \"Game over!\" message.")

            if (!main.isFinished) return CheckResult(false, "Program has not finished after end command")

            main.stop()
            return CheckResult.correct()
        }

        @DynamicTest
        fun cf7Test(): CheckResult {
            val whiteDiscs = mutableListOf<Pair<Int, Int>>()
            val blackDiscs = mutableListOf<Pair<Int, Int>>()

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if (position == -1) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")

            outputString = main.execute("5X5").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "5 x 5 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")
            position = checkOutput(outputString.lowercase(), position,
                * getBoard(5, 5 ,whiteDiscs, blackDiscs))
            if (position == -1) return CheckResult(false, "Wrong board output.")
            position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
            if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")

            for (row in 1..5) {
                for (col in 1..5) {
                    outputString = main.execute(col.toString()).trim()
                    if ( (row * 5 + col) % 2 == 0 ) whiteDiscs.add(Pair(row, col)) else blackDiscs.add(Pair(row, col))
                    position = checkOutput(outputString.lowercase(), 0,
                        * getBoard(5, 5 ,whiteDiscs, blackDiscs))
                    if (position == -1) return CheckResult(false, "Wrong board output.")
                    val checkOutStr = if ( (row * 5 + col) % 2 == 1 ) "anna\'s turn" else "joan\'s turn"
                    position = checkOutput(outputString.lowercase(), position, checkOutStr)
                    if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")
                }
            }

            for (col in 1..5) {
                outputString = main.execute(col.toString()).trim()
                position = checkOutput(outputString.lowercase(), 0, "column $col is full","joan's turn")
                if (position == -1) return CheckResult(false, "Wrong output after full column error.")
            }

            outputString = main.execute("end").trim()
            position = checkOutput(outputString.lowercase(), 0, "game over!")
            if (position == -1) return CheckResult(false, "Wrong \"Game over!\" message.")

            main.stop()
            return CheckResult.correct()
        }

        @DynamicTest
        fun cf8Test(): CheckResult {
            val whiteDiscs = mutableListOf<Pair<Int, Int>>()
            val blackDiscs = mutableListOf<Pair<Int, Int>>()

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.lowercase(), 0, "connect four")
            if (position == -1) return CheckResult(false, "Wrong program title.")
            position = checkOutput(outputString.lowercase(), position, "first player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for first player's name.")

            outputString = main.execute("Anna").trim()
            position = checkOutput(outputString.lowercase(), 0, "second player's name:")
            if (position == -1) return CheckResult(false, "Wrong prompt for second player's name.")

            outputString = main.execute("Joan").trim()
            position = checkOutput(outputString.lowercase(), 0,
                "set the board dimensions (rows x columns)", "press enter for default (6 x 7)")
            if (position == -1) return CheckResult(false, "Wrong prompt for board dimensions.")

            outputString = main.execute("5X5").trim()
            position = checkOutput(outputString.lowercase(), 0, "anna vs joan", "5 x 5 board")
            if (position == -1) return CheckResult(false, "Wrong game information output.")
            position = checkOutput(outputString.lowercase(), position,
                * getBoard(5, 5 ,whiteDiscs, blackDiscs))
            if (position == -1) return CheckResult(false, "Wrong board output.")
            position = checkOutput(outputString.lowercase(), position, "anna\'s turn")
            if (position == -1) return CheckResult(false, "Wrong prompt for player's turn.")

            var input = mutableListOf<String>("0", "6", "7", "10", "122")
            for (move in input) {
                outputString = main.execute(move).trim()
                position = checkOutput(outputString.lowercase(), 0, "the column number is out of range (1 - 5)",
                    "anna\'s turn")
                if (position == -1) return CheckResult(false,"Wrong message for out of range input.")
            }

            input = mutableListOf<String>("one", "7i", "k", "12z")
            for (move in input) {
                outputString = main.execute(move).trim()
                position = checkOutput(outputString.lowercase(), 0, "incorrect column number",
                    "anna\'s turn")
                if (position == -1) return CheckResult(false,"Wrong message for invalid column number.")
            }

            outputString = main.execute("end").trim()
            position = checkOutput(outputString.lowercase(), 0, "game over!")
            if (position == -1) return CheckResult(false, "Wrong \"Game over!\" message.")

            main.stop()
            return CheckResult.correct()
        }

    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        val isPlainText = outputString.contains('|') || outputString.contains('=')
        for (str in checkStr) {
            val newStr = if ( isPlainText ) str
                .replace('║', '|')
                .replace('╚', '=')
                .replace('═', '=')
                .replace('╩', '=')
                .replace('╝', '=')
            else str
            val findPosition = outputString.indexOf(newStr, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + newStr.length
        }
        return searchPosition
    }

    fun getBoard(rows: Int, columns: Int, whiteDiscs: MutableList<Pair<Int, Int>>, blackDiscs: MutableList<Pair<Int, Int>>): Array<String> {
        val boardStr = StringBuilder()
        for (i in 1 until columns)
            boardStr.append("$i ")
        boardStr.appendLine("$columns")

        for (j in rows downTo 1) {
            for (i in 1..columns) {
                val strPos = if ( whiteDiscs.contains(Pair(j, i)) ) "║o" else if ( blackDiscs.contains(Pair(j, i)) ) "║*" else "║ "
                boardStr.append(strPos)
            }
            boardStr.appendLine("║")
        }

        boardStr.append("╚═")
        for (i in 1 until columns)
            boardStr.append("╩═")
        boardStr.appendLine("╝")

        return boardStr.toString().split("\n").toTypedArray()
    }


  learner_created: false
- name: src/connectfour/service/PlayerFactory.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Player

    interface PlayerFactory {
        fun newPlayer(name: String): Player
    }
  learner_created: true
- name: src/connectfour/service/GameService.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Player

    interface GameService {
        fun throwDisk(player: Player, column: Int)
        fun getWinner(): Player?
        fun isColumnFull(column: Int): Boolean
        fun isBoardFull(): Boolean
    }
  learner_created: true
- name: src/connectfour/service/GameServiceFactoryImpl.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Game

    class GameServiceFactoryImpl : GameServiceFactory {
        override fun newServiceForGame(game: Game): GameService {
            return GameServiceImpl(game)
        }
    }
  learner_created: true
- name: src/connectfour/service/PlayerFactoryImpl.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Player

    class PlayerFactoryImpl : PlayerFactory {
        override fun newPlayer(name: String): Player = Player(name)
    }
  learner_created: true
- name: src/connectfour/service/GameServiceFactory.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Game

    interface GameServiceFactory {
        fun newServiceForGame(game: Game): GameService
    }
  learner_created: true
- name: src/connectfour/console/ConsoleRunner.kt
  visible: true
  text: |
    package connectfour.console

    class ConsoleRunner {

        fun run() {
        }

    }
  learner_created: true
- name: src/connectfour/service/GameServiceImpl.kt
  visible: true
  text: |
    package connectfour.service

    import connectfour.entity.Game
    import connectfour.entity.Player

    class GameServiceImpl(
        private val game: Game
    ) : GameService {
        override fun throwDisk(player: Player, column: Int) {
            TODO("Not yet implemented")
        }

        override fun getWinner(): Player? {
            TODO("Not yet implemented")
        }

        override fun isColumnFull(column: Int): Boolean {
            TODO("Not yet implemented")
        }

        override fun isBoardFull(): Boolean {
            TODO("Not yet implemented")
        }
    }
  learner_created: true
- name: src/connectfour/repository/GameRepositoryImpl.kt
  visible: true
  text: |
    package connectfour.repository

    import connectfour.entity.Board
    import connectfour.entity.Game
    import connectfour.entity.Player

    object GameRepositoryImpl : GameRepository {
        private val games: MutableList<Game> = mutableListOf()

        override fun create(player1: Player, player2: Player, rows: Int, columns: Int): Int {
            val game = Game(
                id = games.size,
                player1 = player1,
                player2 = player2,
                board = Board(
                    rows = rows,
                    columns = columns,
                )
            )
            games.add(game)
            return game.id
        }

        override fun findById(id: Int): Game? = this.games.firstOrNull { it.id == id }
    }
  learner_created: true
- name: src/connectfour/entity/Board.kt
  visible: true
  text: |
    package connectfour.entity

    data class Board(
        val rows: Int,
        val columns: Int
    ) {
        val data: List<MutableList<CellType>> = List(rows) {
            MutableList(columns) {
                CellType.Free
            }
        }
    }
  learner_created: true
- name: src/connectfour/entity/CellType.kt
  visible: true
  text: |
    package connectfour.entity

    enum class CellType(val char: Char) {
        Free(' '),
        Player1('x'),
        Player2('o'),
    }
  learner_created: true
- name: src/connectfour/entity/Game.kt
  visible: true
  text: |
    package connectfour.entity

    data class Game(
        val id: Int,
        val player1: Player,
        val player2: Player,
        val board: Board,
    )
  learner_created: true
- name: src/connectfour/console/ConsoleApplication.kt
  visible: true
  text: |
    package connectfour

    import connectfour.repository.GameRepository
    import connectfour.repository.GameRepositoryImpl
    import connectfour.service.GameServiceFactory
    import connectfour.service.GameServiceFactoryImpl
    import connectfour.service.PlayerFactory
    import connectfour.service.PlayerFactoryImpl

    object ConsoleApplication {
        val playerFactory: PlayerFactory = PlayerFactoryImpl()
        val gameRepository: GameRepository = GameRepositoryImpl
        val gameServiceFactory: GameServiceFactory = GameServiceFactoryImpl()
    }
  learner_created: true
- name: src/connectfour/entity/Player.kt
  visible: true
  text: |
    package connectfour.entity

    data class Player(
        val name: String
    )
  learner_created: true
- name: src/connectfour/repository/GameRepository.kt
  visible: true
  text: |
    package connectfour.repository

    import connectfour.entity.Game
    import connectfour.entity.Player

    interface GameRepository {
        fun create(player1: Player, player2: Player, rows: Int, columns: Int): Int
        fun findById(id: Int): Game?
    }
  learner_created: true
- name: src/connectfour/console/ConsoleUtils.kt
  visible: true
  learner_created: true
- name: src/connectfour/exception/IncorrectColumnNumberException.kt
  visible: true
  learner_created: true
- name: src/connectfour/console/InputCommand.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/202/stages/1004/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 04 Oct 2021 20:58:14 UTC
record: -1
